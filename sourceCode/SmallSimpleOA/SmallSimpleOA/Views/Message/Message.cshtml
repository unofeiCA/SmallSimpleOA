@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model SmallSimpleOA.ViewModels.MessageMessageViewModel
@using Microsoft.AspNetCore.Http

<div class="container row h-100 mh-100 pb-2">
    <div class="col-12 h-100">
        <div class="row h-5" >
            <div class="col-3 h-100">
                <h3 class="mb-0">Contacts</h3>
            </div>
            <div class="col-9 container">
                <div id="loader" class="m-auto"></div> 
            </div>
        </div>
        <div class="row h-95 pt-3">
            <div class="col-3 container h-100">
                <div class="row h-10">
                    <div class="col-12 h-100">
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle w-75" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @Model.SelDep.Name
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                @foreach (var department in Model.DepartmentList)
                                {
                                    <a class="dropdown-item" href="@Url.Action("Message", "Message", new {d = department.Id})">@department.Name</a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row  h-90">
                    <div class="col-12 h-100">
                        <div class="list-group mh-100" id="userList" style="overflow-y: scroll;">

                            @foreach (var user in Model.StaffOfDepartment)
                            {
                                if (user.Id == @Context.Session.GetInt32("uid"))
                                {
                                    continue;
                                }

                                <a href="#" userId="@user.Id" class="list-group-item list-group-item-action">@user.FirstName&nbsp;@user.LastName&nbsp;&nbsp;<span></span></a>
                                
                            }


                        </div>
                    </div>
                </div>

            </div>
            <div class="col-9 container h-100">
                <div id="messageBox" class="h-80 container  border" style="overflow-y:scroll;">

                </div>
                <div class="h-20 container row border p-3 m-0">
                    <div class="input-group">
                        <textarea id="msg" type="text" class="form-control h-100" placeholder="Type to input..." style="resize:none;"></textarea>
                        <div class="input-group-append" id="button-addon4">
                            <button id="sendBtn" class="btn btn-success" type="button">Send</button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<div style="display:none;" >
    <div class="row p-1" id="msgBlockFrom">
        <div class="col-11">
            <div class="float-left rounded bg-info p-2 mw-100">
                <p class="mb-0 mw-100" style="word-break:break-word;"></p>
            </div>
        </div>
        <div class="col-1">
        </div>
    </div>

    <div class="row p-1" id="msgBlockTo">
        <div class="col-1">
        </div>
        <div class="col-11">
            <div class="float-right rounded bg-success p-2 mw-100">
                <p class="mb-0 mw-100" style="word-break:break-word;"></p>
            </div>
        </div>

    </div>
</div>


@section Scripts{
<script>
        $("#loader").css("height", $("#loader").parent().height());
        $("#loader").css("width",  $("#loader").parent().height());
        connection.off( "ReceiveMessage", onMsgFunc);

        connection.on("ReceiveMessage", function (uid, userName, message)
        {
            var msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            if (uid == to){
                @*current chat target*@
                showMsg(message, 'from', 'tail');
            }else{
                @*not current*@
                fetchUnread();
            }

        });


        let disToTop = -1;
        $("#messageBox").scroll(function(){

            disToTop = $(this).scrollTop();
        });

        $("#messageBox").on("mousewheel", function(e){
            if (disToTop != 0){ return; }
            if (fetching == 1){ return; }
            if(e.originalEvent.wheelDelta > 0)
            {
                fetching = 1;
                fetchMsgHis(to, offset, 20);
            }
            else
            {
            }

        });

        $("#sendBtn").click(function()
        {
            if (to == 0){$( "#msg").val(""); return;}
            let message = $("#msg").val();
            if (message.trim() == ""){
                return;
            }
            connection.invoke("SendMessage", to, message).then(function(){

                showMsg(message, 'to', 'tail');
            }).catch(function (err) {
                return console.error(err.toString());
            });
            $("#msg").val("");
        });


        let msgBoxHeightFix = 0;
        function showMsg(msg, fromTo, headTail){
            if(msgBoxHeightFix == 0){
                let h = $("#messageBox").height();
                $("#messageBox").css("max-height", h);
                msgBoxHeightFix = 1;
            }
            let m;
            if (fromTo == 'from'){
                m = $("#msgBlockFrom").clone();
            }else if(fromTo == 'to'){
                m = $("#msgBlockTo").clone();
            }else{
                return;
            }
            m.find("p").text(msg);
            if (headTail == 'head'){
                $("#messageBox").prepend(m);
            }else if (headTail == 'tail'){
                $("#messageBox").append(m);
                $("#messageBox").animate({ scrollTop: $("#messageBox").prop("scrollHeight")});

            }else{
                return;
            }
        }

        function fetchMsgHis(uid, ofsit, size)
        {
            $("#loader").addClass("loader");
            $.ajax({
                type: "GET",
                data: {tId : to, offset : ofsit, size: size},
                url: "@Url.Action("FetchMsg", "Message")",
                dataType: 'json',
                success: function (response) {
                    if (response == undefined || response.length <= 0){
                        $("#loader").removeClass("loader");
                        fetching = 0;
                        return;
                    }
                    let last = response[response.length - 1];
                    offset = last['Id'];
                    for(let i = 0; i < response.length; i ++){
                        let m = response[i];
                        let msg = m['Content'];
                        let tarId = m['MsgTo'];
                        let fromTo;
                        if (tarId == to){
                            fromTo = 'to';
                        }else{
                            fromTo = 'from'
                        }

                        showMsg(msg, fromTo, 'head')
                    }
                    if (ofsit == 0){
                        $("#messageBox").animate({ scrollTop: $("#messageBox").prop("scrollHeight")});
                    }
                    fetchUnread();
                    fetching = 0;
                    $("#loader").removeClass("loader");
                },
                error: function (response) {
                    $("#loader").removeClass("loader");
                    fetching = 0;
                    alert('Something unexpected happened, please try it again later.');
                }
            });
        }

        function init(){
            $("#messageBox").empty();
            offset = 0;
            disToTop = -1;
            fetching = 0;
        }

        let from = @Context.Session.GetInt32("uid");
        let offset = 0;
        let to = 0;
        let fetching = 0;
        let unreadMsg = "";
        $("#userList").children("a").click(function(){
            if (to == $(this).attr('userId')){return;}
            init();
            $(this).parent().children().removeClass('active');
            $(this).addClass('active');
            $(this).children("span").text("");
            $(this).children("span").removeClass("badge");
            $(this).children("span").removeClass("badge-primary");
            to = $(this).attr('userId');
            let amount = 20;
            for (let k in unreadMsg){
                if(k == to){
                    amount = unreadMsg[k];
                    break;
                }
            }
            if(amount < 20){
                amount = 20;
            }
            fetching = 1;
            fetchMsgHis(to, offset, amount);
        });

        @*if already have a target, chat to that target directly*@
        @if (Model.TargetId > 0)
        {
            @:$("#userList").children("a").each(function(){
                @:if($(this).attr('userId') == @Model.TargetId)
                @:{
                    @:$(this).click();
                @:}
            @:});
        }

</script>
}